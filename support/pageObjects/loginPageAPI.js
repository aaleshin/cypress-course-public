export const LoginPageAPI = {    login_api(){        return cy.request(Cypress.env("host") + '/accounts/login/')            .its('body')            .then((body) => {                const $html = Cypress.$(body)                this.csrf = $html.find("input[name=csrfmiddlewaretoken]").val()                cy.loginByCSRF(this.csrf).then((response) => {                    expect(response.status).to.eq(200)                    this.user_id = response.requestHeaders.Referer                })            })    },    get_employee_id(){        this.employee_id = this.user_id.match(/\d+/)[0]    },    edit_user_personal_settings(dict){        return cy.request(Cypress.env("host") + '/employees/' + this.employee_id + '/settings/user_info/')            .its('body')            .then((body) => {                const $html = Cypress.$(body)                var csrf = $html.find("input[name=csrfmiddlewaretoken]").val()                dict.csrfmiddlewaretoken = csrf                return cy.request({                    method: 'POST',                    url: Cypress.env("host") + '/employees/' + this.employee_id + '/settings/user_info/',                    form: true,                    body: dict,                    headers: {                        Referer: Cypress.env("host") + '/employees/' + this.employee_id + '/settings/user_info/',                    }                }).then((response)=>{                    expect(response.status).to.eq(200)                    const $html1 = Cypress.$(response.body)                    //make sure the values have been updated                    for (const [key, value] of Object.entries(dict)){                        var input = "input[name="+key+"]"                        expect($html1.find(input).val()).to.eq(value)                    }                })        })    }};